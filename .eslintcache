[{"D:\\Programs\\code\\gits\\immobilier\\src\\App.tsx":"1"},{"size":6070,"mtime":1606645271293,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"z4w9f1","D:\\Programs\\code\\gits\\immobilier\\src\\App.tsx",["7","8","9"],"// Packages\r\nimport { PropsWithChildren } from 'react';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport axios from 'axios';\r\nimport { LatLngTuple } from 'leaflet';\r\nimport { Map, Marker, TileLayer, Popup } from 'react-leaflet';\r\n\r\nimport Key from './Key';\r\n\r\n// Styles\r\nimport './Global.css';\r\nimport styles from './App.module.css';\r\n\r\nimport SideBar from './SideBar';\r\n\r\n// Component\r\nconst App: React.FC = () => \r\n{\r\n\r\n  interface Point \r\n  {\r\n    country: string,\r\n    district: string,\r\n    locality: string,\r\n    address: string,\r\n    coordinates: LatLngTuple\r\n  }\r\n\r\n  // Initial Values\r\n  const initialMapPosition: LatLngTuple = [51.505, -0.09];\r\n\r\n  // Map\r\n  const [mapPosition, setMapPosition] = useState<LatLngTuple>(initialMapPosition);\r\n  const [mapZoom, setMapZoom] = useState<number>(12);\r\n\r\n  // Points\r\n  const point : Point = { country : \"France\", district : \"7e\", locality : \"Marseille\", address : \"125 rue du vallon des auffes\", coordinates : [10, 10]};\r\n  const [points, setPoints] = useState<Point[]>([point]);\r\n  const [allPoints, setAllPoints] = useState<LatLngTuple[]>([[0, 0]]);\r\n  const [selectedPoint, setSelectedPoint] = useState<LatLngTuple>([0, 0]);\r\n  const [selectedPoints, setSelectedPoints] = useState<LatLngTuple[]>([[0, 0]]);\r\n\r\n  // Get user current position\r\n  useEffect(() => \r\n  {\r\n    navigator.geolocation.getCurrentPosition(({ coords }) => \r\n    {\r\n      setMapPosition([coords.latitude, coords.longitude]);\r\n    }, (err) => {\r\n      setMapPosition(initialMapPosition);\r\n    });\r\n  }, []);\r\n\r\n  // Search Map Coordinates\r\n  async function onSubmitForm(data: any) \r\n  {\r\n    const searhCoordinates = await axios.get(`http://dev.virtualearth.net/REST/v1/Locations/FR/${data.zipcode}/${data.city}/${data.address}?key=${Key}`)\r\n\r\n    if (searhCoordinates) \r\n    {\r\n      const coordinates: LatLngTuple = searhCoordinates.data.resourceSets[0].resources[0].geocodePoints[0].coordinates;\r\n\r\n      const newPoint: Point = \r\n      {\r\n        ...data,\r\n        coordinates\r\n      }\r\n\r\n      setPoints(currentPoints => [...currentPoints, newPoint]);\r\n      setSelectedPoint(coordinates);\r\n      setSelectedPoints([...selectedPoints, coordinates]);\r\n    }\r\n  }\r\n\r\n  function filter(data : any, priceMin : number, priceMax : number, surfaceMin : number, surfaceMax : number) : LatLngTuple[]\r\n  {\r\n    const updatedselectedPoints : LatLngTuple[] = [];\r\n    let length = data.length;\r\n    for (let i = 0; i < length; i++) \r\n    {\r\n      if(data[i].lat != null && data[i].lon != null) \r\n      {\r\n        if(data[i].valeur_fonciere >= priceMin && data[i].valeur_fonciere <= priceMax)\r\n        {\r\n          if(data[i].surface_terrain >= surfaceMin && data[i].surface_terrain <= surfaceMax)\r\n          {\r\n            updatedselectedPoints.push([data[i].lat, data[i].lon]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return updatedselectedPoints;\r\n  }\r\n\r\n  function deleteOrigin(coordinates : LatLngTuple[]): LatLngTuple[] \r\n  {    \r\n    const updatedselectedPoints = [...coordinates];\r\n    for (let i = 0; i < updatedselectedPoints.length; i++) \r\n    {\r\n      if(updatedselectedPoints[i][0] === 0 && updatedselectedPoints[i][1] === 0) \r\n      {\r\n        updatedselectedPoints.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n    return updatedselectedPoints;\r\n  }\r\n\r\n  // Search Map Coordinates\r\n  async function onFilteringSubmitForm(data: any) \r\n  {\r\n    let output = await axios.get(`http://api.cquest.org/dvf?code_postal=${data.zipcode}`);\r\n    let response = output.data.resultats;\r\n\r\n    let coordinates: LatLngTuple[] = response.map((item) => \r\n    {\r\n      if(item.lat != null && item.lon != null)\r\n        return [item.lat, item.lon]\r\n      else \r\n        return [0, 0];\r\n    });\r\n    coordinates = deleteOrigin(coordinates);\r\n\r\n    setAllPoints(response)\r\n    let x = filter(response, data.price_min, data.price_max, data.surface_min, data.surface_max);\r\n    setSelectedPoints(x);\r\n  }\r\n\r\n  // Search Map Coordinates\r\n  async function onZipcodeSubmitForm(data: any) \r\n  {\r\n    let output = await axios.get(`http://api.cquest.org/dvf?code_postal=${data.zipcode}`);\r\n    let center = await axios.get(`http://dev.virtualearth.net/REST/v1/Locations/FR/${data.zipcode}/${data.city}/${data.address}?key=${Key}`)\r\n    let centerCoordinates: LatLngTuple = center.data.resourceSets[0].resources[0].geocodePoints[0].coordinates;\r\n    let response = output.data.resultats;\r\n\r\n    let coordinates: LatLngTuple[] = response.map((item) => \r\n    {\r\n      if(item.lat != null && item.lon != null)\r\n        return [item.lat, item.lon]\r\n      else \r\n        return [0, 0];\r\n    });\r\n    coordinates = deleteOrigin(coordinates);\r\n\r\n    let mini_response = coordinates.slice(1, 10);\r\n    setAllPoints(response);\r\n    setSelectedPoints(mini_response);\r\n    setMapPosition(centerCoordinates);\r\n  }\r\n\r\n  // Show Point\r\n  function showPoint(pointIndex: number): void \r\n  {\r\n    setMapPosition(points[pointIndex].coordinates);\r\n    setSelectedPoint(points[pointIndex].coordinates);\r\n  }\r\n\r\n  const onMapZoom = (zoom) =>\r\n  {\r\n    setMapZoom(zoom)\r\n  }\r\n\r\n  let sideProps : PropsWithChildren<any> = {onSubmit : onSubmitForm, onFilteringSubmit : onFilteringSubmitForm, onZipcodeSubmit : onZipcodeSubmitForm, points : points, showPoint : () => showPoint};\r\n\r\n  // Component\r\n  return (\r\n    <div className={styles.container}>\r\n      <SideBar {...sideProps}/>\r\n      <div className={styles.map}>\r\n        <Map center={mapPosition} zoom={mapZoom} onViewportChange={({ zoom }) => onMapZoom(zoom)}>\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n          />\r\n          <Marker position={selectedPoint}>\r\n            <Popup>{selectedPoint[0]} , {selectedPoint[1]}</Popup>\r\n          </Marker>\r\n          {selectedPoints.map(item =><Marker position={item}><Popup>{selectedPoint[0]} , {selectedPoint[1]}</Popup></Marker>)}\r\n        </Map>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"10","severity":1,"message":"11","line":40,"column":10,"nodeType":"12","messageId":"13","endLine":40,"endColumn":19},{"ruleId":"14","severity":1,"message":"15","line":53,"column":6,"nodeType":"16","endLine":53,"endColumn":8,"suggestions":"17"},{"ruleId":"10","severity":1,"message":"18","line":124,"column":32,"nodeType":"12","messageId":"13","endLine":124,"endColumn":43},"@typescript-eslint/no-unused-vars","'allPoints' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initialMapPosition'. Either include it or remove the dependency array.","ArrayExpression",["19"],"'coordinates' is assigned a value but never used.",{"desc":"20","fix":"21"},"Update the dependencies array to be: [initialMapPosition]",{"range":"22","text":"23"},[1544,1546],"[initialMapPosition]"]